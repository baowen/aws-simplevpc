# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-simplevpc
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  # - serverless-vpc-plugin
  
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  # vpc:
  #   securityGroupIds:
  #     -  # plugin will add LambdaExecutionSecurityGroup to this list
  #   subnetIds:
  #     -  # plugin will add the "Application" subnets to this list
      
# you can overwrite defaults here
#  stage: dev
  region: eu-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"



# functions:
#   hello:
#     handler: handler.hello
# #    The following are a few example events you can configure
# #    NOTE: Please make sure to change your handler code to work with those events
# #    Check the event documentation for details
#     events:
#       - http:
#           path: /hello
#           method: post
 
resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 172.16.0.0/16
        Tags:
          - Key: Name
            Value: aws-simplevpc
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway
    Public1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: eu-west-2a
        CidrBlock: 172.16.1.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: Public1
    Private1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: eu-west-2b
        CidrBlock: 172.16.2.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: Private1
    PublicRT:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PublicRT
    PrivateRT:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateRT
    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRT
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTableAssociationPublic1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: Public1
        RouteTableId:
          Ref: PublicRT
    SubnetRouteTableAssociationPrivate1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: Private1
        RouteTableId:
          Ref: PrivateRT
    PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties: 
        Tags:
          - Key: Name
            Value: PublicNACL
        VpcId:
          Ref: Vpc
    InboundPublicHTTPRule:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: PublicNACL
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 80
          To: 80
    InboundPublicSSHRule:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: PublicNACL
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 22
          To: 22
    OutboundPublicRule:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: PublicNACL
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535
    PublicSubnetNetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: Public1
        NetworkAclId:
          Ref: PublicNACL
    PrivateNACL:
      Type: AWS::EC2::NetworkAcl
      Properties: 
        Tags:
          - Key: Name
            Value: PrivateNACL
        VpcId:
          Ref: Vpc
    InboundPrivate100Rule:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: PrivateNACL
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        CidrBlock: 172.16.1.0/24
        PortRange:
          From: 22
          To: 22
    OutboundPrivateRule:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: PrivateNACL
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535
    PrivateSubnetNetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: Private1
        NetworkAclId:
          Ref: PrivateNACL